# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BmuLWHIm8DehX4oJa3yIio7UzYqZQd8F

The research explored the relationship between the starting price of Mario Kart Wii auctions on eBay and the number of bids. The linear regression was used to investigate this
relationship. Correlation coefficient of r=-0.633 indicates a moderately strong negative linear relationship between the two variables. The coefficient of determination R2= 0.401 
suggests 40.1% of the variability in the response variable is explained by the starting price and other 59.9% by others. The linear equation can be used to predict the number of 
bids knowing the starting price: n_bids=-0.247 *start_pr+15.707. The 95% confidence interval of [-0.297, -0.197] for the slope suggests a significant negative relationship between
the starting price and the number of bids.
The linear equation can be used to set the starting price of eBay auctions strategically by predicting the number of bids in this product segment. Knowing about this negative linear
relationship, you can intentionally lower the starting price and manipulate the psychology of the bidders.


"""

# Import libraries
import pandas
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import statsmodels.api as statsmodels
import seaborn as sns
from statistics import mode

# Import dataset
data = pandas.read_csv('mariokart.csv')

# Display first observations
data.head()

# Calculate Descriptive stats for the number of bids and starting price of the sample data
mean_b = data['n_bids'].mean()
median_b = np.median(data['n_bids'])
std_b = np.std(data['n_bids'],ddof = 1) # Find sample standard deviation
print('\n', 'n_bids', '\nMean: ', mean_b, '\nMedian: ', median_b, '\nStd: ', std_b)
print('Mode: ', mode(data['n_bids'])) # Find mode
print('Range:', np.ptp(data['n_bids'])) # Find range

mean_s = data['start_pr'].mean()
median_s = np.median(data['start_pr'])
std_s = np.std(data['start_pr'],ddof = 1)
print('\n', 'start_pr', '\nMean: ', mean_s, '\nMedian: ', median_s, '\nStd: ', std_s)
print('Mode: ', mode(data['start_pr']))
print('Range:', np.ptp(data['start_pr']))

# Data vizualization for both variables
plt.hist(data['start_pr'], color = 'orange') # Build an orange histogram
plt.title('Starting price in Mario Kart Wii auction, week of October 2009')
plt.xlabel('Starting price, $')
plt.ylabel('Frequency') # Set title and axes labels
plt.axvline(mean_s, color='black', linewidth=1) # Plot mean
plt.axvline(median_s, color='navy', linestyle='dashed', linewidth=1) # Plot median
plt.text(mean_s, plt.ylim()[1] * 0.40, 'Mean ', color='black', ha='right') # Annotate the mean
plt.text(median_s, plt.ylim()[1] * 0.50, ' Median', color='navy', ha='left') # Annotate the median

plt.show() # Display the graph


plt.hist(data['n_bids'], color = 'limegreen')
plt.title('Numbers of bids in Mario Kart Wii auction, week of October 2009')
plt.xlabel('Number of bids')
plt.ylabel('Frequency')
plt.axvline(mean_b, color='black', linewidth=1)
plt.axvline(median_b, color='navy', linestyle='dashed', linewidth=1)
plt.text(mean_b, plt.ylim()[1] * 0.40, 'Mean ', color='black', ha='right')
plt.text(median_b, plt.ylim()[1] * 0.50, ' Median', color='navy', ha='left')

plt.show() # Display the graph

# Set style
sns.set(color_codes=True, font_scale = 1.2)
sns.set_style("whitegrid")

# Set a function to create scatter plot, plot of residuals, find r, R-squared, and regression equation
def regression_model(column_x, column_y):

    # Fit the regression line
    X = statsmodels.add_constant(data[column_x])
    Y = data[column_y]
    regressionmodel = statsmodels.OLS(Y,X).fit()
    global slope # Create variables to store slope and r
    global r

    # Calculate Pearson's r, R-squared, slope, and intercept precise to 3 decimal places
    r = round(data[column_x].corr(data[column_y]),3)
    Rsquared = round(regressionmodel.rsquared,3)
    slope = round(regressionmodel.params[1],3)
    intercept = round(regressionmodel.params[0],3)

    fig, (ax1, ax2) = plt.subplots(ncols=2, sharex=True, figsize=(12,4))
    sns.regplot(x=column_x, y=column_y, data=data, marker="+", ax=ax1) # Make Scatter plot
    sns.residplot(x=column_x, y=column_y, data=data, ax=ax2) # Make Residual plot
    ax2.set(ylabel='Residuals') # Set label
    ax2.set_ylim(min(regressionmodel.resid)-1,max(regressionmodel.resid)+1)
    plt.figure()
    sns.displot(regressionmodel.resid, kde=False, color='red') # Build histogram
    ax = plt.gca()
    ax.set_xlabel('Residuals')
    print("Pearson's r = ",r)
    print("R-squared = ",Rsquared)
    print("Regression equation: "+column_y+" = ",slope,"* "+column_x+" + ",intercept)

# Call the regression function
regression_model("start_pr", "n_bids")

# Confidence Interval

n = 143
SE = ((1-r**2)/(n-2))**0.5*std_b/std_s # Find standard error

t95 = stats.t.ppf(0.975,143-2) # Calculate t-value
print("t95 =",round(t95,3))

lower_bound = slope - t95*SE # Find the Lower and the upper bounds
upper_bound = slope + t95*SE

print("interval =", [round(lower_bound,3),round(upper_bound,3)])
